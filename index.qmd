---
title: "C√°lculo num√©rico y simb√≥lico con Julia"
subtitle: "Seminario de Innovaci√≥n Docente<br>Universidade da Coru√±a"
author: "Alfredo S√°nchez Alberca &nbsp; [{{< fa envelope >}}](mailto:asalber@ceu.es) [{{< fa brands twitter >}}](https://twitter.com/aprendeconalf) [{{< fa home >}}](https://aprendeconalf.es)"
date: 07-21-2023
date-format: long
title-slide-attributes:
    #data-background-color: black
    data-background-image: img/prompt-julia.png
    data-background-size: contain
lang: es
fig-align: center
---

# ¬øQu√© es Julia?

[Julia](https://julialang.org/) un lenguaje de programaci√≥n moderno creado en 2012 el MIT por el equipo del profesor Edelman, orientado a c√°lculo cient√≠fico y el an√°lisis de datos.

De los creadores de Julia:

>_We want a language that is:_
>
- _Open source._
- _With the speed of C._
- _Obvious, familiar mathematical notation like Matlab._
- _As usable for general programming as Python._
- _As easy for statistics as R._
- _As natural for string processing as Perl._
- _As powerful for linear algebra as Matlab._
- _As good at gluing programs together as the shell._
- _Dirt simple to learn, yet keeps the most serious hackers happy._

# Experiencia docente

Pr√°cticas en el Grado de Ingenier√≠a Matem√°tica

:::: {.columns}

::: {.column width="32%"}
Curso 2022/2023

- √Ålgebra Lineal
- An√°lisis I y II
- Matem√°tica Discreta
:::

::: {.column width="32%"}
Curso 2023/2024

- An√°lisis III
- Ecuaciones Diferenciales
- Ecuaciones en Derivadas Parciales
- Geometr√≠a Diferencial
- M√©todos num√©ricos I y II

:::

::: {.column width="32%"}
Curso 2024/2025

- Aprendizaje autom√°tico
- Redes neuronales
- Series temporales
- Procesamiento del lenguaje natural
:::
::::

# ¬øPor qu√© Julia?

## Sencillez

Lenguaje de alto nivel con una sintaxis f√°cil de aprender (similar a Python, R o Matlab).

```{julia}
println("¬°Hola Julia!")
```

```{julia}
x = [1, 2, 3, 4, 5]
n = length(x)  
media = sum(x) / n
varianza = sum(x.^2) / n - media^2
(media, varianza)
```

## Rapidez 

Julia es un lenguaje muy veloz (equiparable a C o Fortran en muchas tareas).

![Comparativa de Julia con otros lenguajes](img/benchmarks.svg)

---

### C√°lculo de pi por el m√©todo de Leibniz

:::: {.columns}

::: {.column width="32%"}
Julia
```julia
function pi(n)
  pi = 0.0;
  op = 1
  for i in 0:n
      pi += op*4/(2i+1)
      op *= -1
  end
  return pi  
end

pi(10^9)
```
$\approx$ 1 seg
:::

::: {.column width="32%"}
C

```c
double pi(double n) {
  double pi = 0;
  int i = 0;
  int op = 1;
  for (i; i < n; i++) {
    pi += op*4/(2*i+1);
    op *= -1;
  }
  return pi;
}

int main() {
  pi(1000000000);
}
```
$\approx$ 3 seg
:::

::: {.column width="35%"}
Python
```python
def pi(n): 
    pi = 0;
    op = 1
    for i in range(n):
        pi += op*4/(2*i+1)
        op *= -1
    return pi 

pi(10^9)
```
$\approx$ 78 seg
:::
::::

---

### Despacho m√∫ltiple

La raz√≥n por la que Julia es tan r√°pido es por que usa [_despacho m√∫ltiple_](https://en.wikipedia.org/wiki/Multiple_dispatch) para precompilar distintas versiones de una misma funci√≥n para cada posible tipo de dato de sus argumentos.

## Tipos de datos num√©ricos

![](img/tipos-datos-numericos.png)

---

:::: {.columns}

::: {.column width="45%"}

```{julia}
typeof(1)
```

```{julia}
typeof(Int16(1))
```

```{julia}
typeof(1.0)
```

```{julia}
typeof(1.0f0)
```

:::

::: {.column width="45%"}

```{julia}
typeof(1//2)
```

```{julia}
typeof(pi)
```

```{julia}
typeof(1+1im)
```
:::
::::

---

### Enteros

| Tipo | Signo | Bits | Min | Max |
|:-|:-:|-:|-:|-:|
| Int8 | ‚úì | 8 | $-2^7$ | $2^7-1$ |
| UInt8 |  | 8 | $0$ | $2^8-1$ |
| Int16 | ‚úì | 16 | $-2^{15}$ | $2^{15}-1$ |
| UInt16 |  | 16 | $0$ | $2^{16}-1$ |
| Int32 | ‚úì | 32 | $-2^{31}$ | $2^{31}-1$ |
| UInt32 |  | 32 | $0$ | $2^{32}-1$ |
| Int64 | ‚úì | 64 | $-2^{63}$ | $2^{63}-1$ |
| UInt64 |  | 64 | $0$ | $2^{64}-1$ |
| Int128 | ‚úì | 128 | $-2^{127}$ | $2^{127}-1$ |
| UInt128 |  | 128 | $0$ | $2^{128}-1$ |
| Bool | N/A | 8 | false (0) | true (1) |

---

### Reales en coma flotante

| Tipo | Bits | Min | Max |
|:-|-:|-:|-:|-:|-:|
| Float16 | 16 | $-6.55e4$ | $6.55e4$ |
| Float32 | 32 | $-3.4028235e38$ | $3.4028235e38$ |
| Float64 | 64 | $-1.7976931348623157e308$ | $1.7976931348623157e308$ |

| Tipo | Min positive | Epsilon |
|:-|-:|-:|
| Float16 | $6.104e-5$ | $0.000977$ |
| Float32 | $1.1754944f-38$ | $1.1920929f-7$ |
| Float64 | $2.2250738585072014e-308$ | $2.220446049250313e-16$ |

---

## Precisi√≥n arbitraria

- `BigInt` permite representar enteros de cualquier tama√±o.
- `BigFloat` permite representar reales de cualquier tama√±o y precisi√≥n.

El l√≠mite lo marca la memoria del ordenador.

```{julia}
BigFloat(pi)
```

```{julia}
BigFloat(pi, precision = 1000)
```

---

### Definici√≥n de nuevos tipos

```{julia}
struct EvenInt <: Integer
    num :: Signed

    # inner constructor
    function EvenInt(num)
        @assert iseven(num)
        new(num)
    end
end

EvenInt(4)
```

---

### Aritm√©tica racional

:::: {.columns}

::: {.column width="45%"}
- Simplifiaci√≥n

  ```{julia}
  4 // 6
  ```

  ```{julia}
  4 // 6 == 2 // 3
  ```

- Suma y resta

  ```{julia}
  1 // 6 + 2 // 4
  ```

  ```{julia}
  2 // 3 - 1 // 6
  ```

:::

::: {.column width="45%"}
- Producto 

  ```{julia}
  2 // 3 * 3 // 4
  ```

- Cociente

  ```{julia}
  3 // 4 / 2 // 3
  ```
:::
::::

---

### Aritm√©tica compleja

La constante `im` est√° asociada al n√∫mero complejo $i=\sqrt{-1}$. 

:::: {.columns}
::: {.column width="45%"}

- Suma y resta

  ```{julia}
  (1 + 2im) + (1 - im)
  ```

  ```{julia}
  (1 + 2im) - (1 + im)
  ```

:::

::: {.column width="45%"}
- Producto 

  ```{julia}
  (1 + 2im) * (2 - 3im)
  ```

- Cociente

  ```{julia}
  (1 + 2im) / (1 - 2im)
  ```
:::
:::: 

---

### Promoci√≥n de tipos

Siempre se promociona hacia el tipo m√°s general.

::: {.column width="45%"}

```{julia}
typeof(Int16(1) + 2)
```

```{julia}
typeof(1.0 + 2)
```

```{julia}
typeof(1 / 2)
```

```{julia}
typeof(1 // 2 + 0.5)
```

```{julia}
typeof(sqrt(1 // 2))
```
:::

::: {.column width="45%"}
```{julia}
typeof((1 // 2) ^ 2.0)
```

```{julia}
typeof(1.0 + 2)
```

```{julia}
typeof(2(1+0im))
```

```{julia}
typeof(im^2)
```

:::: 

---

## Tipos de datos compuestos

::::{.columns}
:::{.column width="55%"}
- Vectores

  ```{julia}
  typeof([1, 2, 3])
  ```

- Matrices

  ```{julia}
  typeof([1 2 3; 4 5 6])
  ```

- Tuplas

  ```{julia}
  typeof((1, "enero", 2020))
  ```

:::
:::{.column width="41%"}
- Diccionarios

  ```{julia}
  typeof(Dict("x" => 1, "y" => 2))
  ```

- Conjuntos

  ```{julia}
  typeof(Set([2, 4, 6]))
  ```
:::
::::
Los tipos compuestos incluyen par√°metros que determinan el tipo de sus elementos.

---

### √Ålgebra de conjuntos

::::{.columns}
:::{.column width="48%"}
```{julia}
A = Set([2, 4])
B = Set([1, 2, 3])
3 ‚àà A 
```

```{julia}
A ‚äÜ B
```

:::
:::{.column width="48%"}

```{julia}
A ‚à™ B
```

```{julia}
A ‚à© B
```
:::
::::

Es f√°cil definir nuevos operadores.

```{julia}
const \À¢ = setdiff
A \À¢ B
```

---

### Aritm√©tica infinita e indeterminaciones

:::: {.columns}

::: {.column width="45%"}

```{julia}
1 / Inf
```

```{julia}
1 / 0
```

```{julia}
0 / 0
```

```{julia}
Inf + 1
```

```{julia}
1 - Inf
```
:::

::: {.column width="45%"}
```{julia}
Inf + Inf
```

```{julia}
Inf - Inf
```

```{julia}
Inf / Inf
```

```{julia}
0 / 0
```

```{julia}
0 * Inf
```
:::

::::

## Definici√≥n de funciones

Julia admite m√∫ltiples formas de definir funciones.

- Tradicional. Similar a otros lenguajes de programaci√≥n.

  ```julia
  function area_tri√°ngulo(base, altura)
    base * altura / 2
  end
  ```

- En l√≠nea. Muy c√≥moda para definir funciones matem√°ticas.

  ```julia
  area_tri√°ngulo(base, altura) = base * altura / 2
  ```
- Funciones an√≥nimas. Se utilizan sobre todo en programaci√≥n funcional, como argumentos de otras funciones.

  ```julia
  area_tri√°ngulo = (base, altura) -> base * altura / 2 
  ```

## Programaci√≥n funcional

Las funciones son objetos que pueden asignarse o pasarse como argumentos de otras funciones.

```{julia}
square(x) = x * x
cuadrado = square
cuadrado(2)
```

```{julia}
componer(f, g) = f ‚àò g
componer(log, sin)(pi/2)
```
---

### Vectorizaci√≥n de funciones y operadores

El operador punto `.` permite aplicar una funci√≥n u operador a los elementos de una colecci√≥n (arrays, vectores, tuplas, etc.)

```{julia}
v = [1, 2, 3]
cuadrado.(v)
```

```{julia}
w = [0, 1, 2]
v .^ w
```

## Expresividad matem√°tica

### Acepta Unicode 

Julia permite caracteres [Unicode](https://en.wikipedia.org/wiki/List_of_Unicode_characters) lo que facilita la expresi√≥n de f√≥rmulas matem√°ticas.

Para ello se utilizan [c√≥digos especiales](https://docs.julialang.org/en/v1/manual/unicode-input/) (en muchos casos son los mismos que en $\LaTeX$), pulsando despu√©s la tecla de tabulaci√≥n.

```{julia}
# Introducir \alpha + TAB
Œ± = 1
```

```{julia}
üòÑ = "julia"
üòÑ ^ 2
```

---

### Composici√≥n de funciones

El operador `‚àò` permite componer funciones.

```{julia}
f(x) = sin(x)
g(x) = log(x)
(g ‚àò f)(pi/2)
```

Tambi√©n puede realizarse con el operador de tuber√≠a `|>` (similar a  %>% en R).

```{julia}
pi / 2 |> sin |> log
```

---

###  Integraci√≥n con $\LaTeX$

El paquete `Latexify` permite obtener el c√≥digo $\LaTeX$ para representar cualquier expresi√≥n matem√°tica.

```{julia}
using Latexify
expr = :((x-y)/(x+y)^2)
latexify(expr)
```

## Integraci√≥n con Quarto

[Quarto](https://quarto.org/) es un sistema de publicaci√≥n de textos cient√≠ficos y t√©cnicos de alta calidad basado en Markdown y $\LaTeX$ (similar a RMarkdown).

Julia es uno de los lenguajes de programaci√≥n que admite.

## Orientaci√≥n al c√°lculo num√©rico

Lenguaje de prop√≥sito general, pero especialmente dise√±ado para el c√°lculo cient√≠fico y el an√°lisis de datos.

# Aplicaciones Matem√°ticas

## Representaci√≥n gr√°fica de funciones

El paquete `Plots` permite la representaci√≥n gr√°fica de funciones con diversos tipos de diagramas.

::::{.columns}
::: {.column width="48%"}
```{julia}
using Plots
plot(sin, 0, 2pi, label = "sen", size = (480,400))
plot!(cos, label = "cos")
```
:::

::: {.column width="48%"}
```{julia}
xs = ys = range(-3,3, length=100)
f(x,y) = 2sin(x^2+y^2) / (x^2+y^2)
surface(xs, ys, f, size = (480, 400))
```
:::
::::

---

```{julia}
plotlyjs()
xs = ys = range(-3,3, length=100)
f(x,y) = 2sin(x^2+y^2) / (x^2+y^2)
surface(xs, ys, f)
```


## C√°lculo simb√≥lico

Existen dos paquetes para c√°lculo simb√≥lico:

- `SymPy`: Basado en el paquete `sympy` de Phthon. Muy maduro, pero lento.
- `Symbolics`. Paquete puro en Julia muy r√°pido, pero no tan completo.

---

### Declaraci√≥n de variables (s√≠mbolos)

::::{.columns}
:::{.column width="48%"}
SymPy
```{julia}
using SymPy
@syms x::real y::real
typeof(x)
```
:::

:::{.column width="48%"}
Symbolics
```{julia}
using Symbolics
@variables x y;
typeof(x)
```
:::
::::

---

### Simplificaci√≥n

::::{.columns}
:::{.column width="48%"}
SymPy
```{julia}
using SymPy
@syms x::real
SymPy.simplify(sin(x)^2 + cos(x)^2)
```

```{julia}
using SymPy
@syms x::real
SymPy.expand((x + 1)^2)
```

```{julia}
SymPy.factor(x^3 - x^2 + x - 1)
```
:::

:::{.column width="48%"}
Symbolics
```{julia}
using Symbolics
@variables x;
Symbolics.simplify(sin(x)^2 + cos(x)^2)
```
:::
::::

---

### Sustituci√≥n de variables 

::::{.columns}
:::{.column width="48%"}
SymPy
```{julia}
using SymPy
@syms x y
expr = cos(x*y)
expr.subs([(x, 2), (y, œÄ)])
```

```{julia}
expr(x=>2, y=>œÄ)
```
:::

:::{.column width="48%"}
Symbolics
```{julia}
using Symbolics
@variables x y
expr = cos(x*y)
substitute(expr, Dict([x=>2, y=>œÄ]))
```
:::
::::

---

### Resoluci√≥n de ecuaciones

::::{.columns}
:::{.column width="48%"}
SymPy
```{julia}
using SymPy
@syms x y
solveset(Eq(x^2, x))
```

```{julia}
solveset(x^2 - x)
```

<!-- ```{julia}
const S = sympy.S
solveset(Eq(x, x), domain=S.Reals)
``` -->

```{julia}
solveset(sin(x) - 1)
```

```{julia}
solveset(x^2 - y, x)
```

```{julia}
linsolve((x+y-3, x-y-1), (x,y))
```
:::

:::{.column width="48%"}
Symbolics  
Para sistemas lineales
```{julia}
using Symbolics
@variables x y
Symbolics.solve_for([x + y ~ 3, x - y ~ 1], [x, y])
```
:::
::::

---

### L√≠mites

::::{.columns}
:::{.column width="48%"}
SymPy
```{julia}
using SymPy
@syms x
limit(sin(x) / x, x, 0)
```

```{julia}
limit(sin(x) / x, x=>0)
```

```{julia}
limit(1 / x, x, 0, "-")
```

```{julia}
limit(1 / x, x, 0, "+")
```
:::

:::{.column width="48%"}
Symbolics  
No implementado a√∫n.
:::
::::

---

### Derivadas

::::{.columns}
:::{.column width="48%"}
SymPy
```{julia}
using SymPy
@syms x y
diff(sin(x))
```

```{julia}
diff(sin(x), x, 2)
```

```{julia}
SymPy.diff(‚ÑØ^(x*y), x)
```

```{julia}
diff(‚ÑØ^(x*y), x, y)
```
:::

:::{.column width="48%"}
Symbolics  

```{julia}
using Symbolics
@variables x y
Symbolics.derivative(sin(x), x)
```

```{julia}
Dx = Symbolics.Differential(x)
expand_derivatives(Dx(sin(x)))
```

```{julia}
Dy = Symbolics.Differential(y)
expand_derivatives(Dy(Dx(‚ÑØ^(x*y))))
```
:::
::::

Es posible usar tambi√©n la notaci√≥n _prima_ `f'` sobrecargando el operador `adjoin`.

---

### Gradiente, Hessiana y Jacobiana

::::{.columns}
:::{.column width="48%"}
SymPy

```{julia}
using SymPy
@syms x y
diff.(‚ÑØ^(x*y), (x, y))
```

```{julia}
hessian(‚ÑØ^(x*y), (x,y))
```

```{julia}
v = [diff.(f, [x, y]) for f in [x^2*y, x*y^2]]
hcat(v...)
```
:::

:::{.column width="48%"}
Symbolics  

```{julia}
using Symbolics
@variables x y
Symbolics.gradient(‚ÑØ^(x*y), [x, y])
```

```{julia}
Symbolics.hessian(‚ÑØ^(x*y), [x, y])
```

```{julia}
Symbolics.jacobian([‚ÑØ^(x*y), x*y], [x, y])
```
:::
::::

---

### Integrales

::::{.columns}
:::{.column width="48%"}
SymPy

```{julia}
using SymPy
@syms x y
integrate(cos(x))
```

```{julia}
integrate(cos(x), (x, 0, œÄ/2))
```

```{julia}
integrate(x^2 - y, (x, -1, 1), (y, -1, 1))
```
:::

:::{.column width="48%"}
Symbolics  

```{julia}
using Symbolics
using SymbolicNumericIntegration
@variables x y
SymbolicNumericIntegration.integrate(cos(x))
```

```{julia}
SymbolicNumericIntegration.integrate(x^2 / (16 + x^2))
```
:::
::::

---

### Ecuaciones diferenciales

```{julia}
using SymPy
@syms x k
y = SymFunction("y")
dsolve(diff(y(x),x) ~  k*y(x))
```

```{julia}
dsolve(diff(y(x),x) ~  k*y(x), ics = Dict(y(0) => 1))
```

## C√°lculo num√©rico

### Polinomios

```{julia}
using Polynomials
p = Polynomial([4,0,2,1])
p(2)
```

```{julia}
Polynomials.roots(p)
```

```{julia}
fit([1,2,3], [1, 0, 1])
```

---

### Interpolaci√≥n
::::{.columns}
:::{.column width="48%"}
```{julia}
using Interpolations
xs = 1:10
itp = Interpolations.interpolate(log.(xs), BSpline(Linear()))
```
:::
:::{.column width="48%"}
```{julia}
xs = 1:0.5:10
itp2 = Interpolations.interpolate(log.(xs), BSpline(Quadratic(Line(OnGrid()))))
```
:::
::::

---

### √Ålgebra Lineal

```{julia}
A = [1 2 3; 0 1 0; 1 0 1]
B = [10, 2, 4]
A \ B
```

```{julia}
using LinearAlgebra
eigvals(A)
```

```{julia}
factorize(A)
```

---

### Resoluci√≥n de ecuaciones

```{julia}
using Roots
f(x) = sin(x)
find_zeros(f, -5, 5)
```

```{julia}
using LinearSolve
A = [1.0 2 3; 0 1 0; 1 0 1]
B = [10.0, 2, 4]
solve(LinearProblem(A, B))
```

```{julia}
using NLsolve
f(x, y) = [(x+3)*(y^3-7)+18, sin(y*exp(x)-1)]
f(x) = [(x[1]+3)*(x[2]^3-7)+18, sin(x[2]*exp(x[1])-1)]
nlsolve(f, [ 0.1, 1.2])
```

---

### Derivaci√≥n num√©rica

```{julia}
using ForwardDiff
f(x) = exp(-x^2)
ForwardDiff.derivative(f, 1)
```

---

### Integraci√≥n num√©rica

```{julia}
using QuadGK
f(x) = x^x
quadgk(f, 0, 1)
```

```{julia}
quadgk(f, big(0), big(1), rtol = 1e-30)
```

```{julia}
quadgk(x -> ‚ÑØ^(-x^2), -Inf, Inf)
```

---

### Ecuaciones diferenciales

```{julia}
using OrdinaryDiffEq
S0, I0, R0 = 7900000, 10, 0
N = S0 + I0 + R0
u0 = [S0, I0, R0]/N
k = 1/3
f(u,p,t) = -k * u  # solving  u‚Ä≤(t) = - k u(t)
time_span = (0.0, 20.0)
prob = ODEProblem(f, I0/N, time_span)
sol = solve(prob, Tsit5(), reltol=1e-8, abstol=1e-8)
plot(sol)
```

# Inconvenientes

## Demora en la primera ejecuci√≥n

Al precompilar cualquier funci√≥n la primera ejecuci√≥n se demora un poco. Esta demora puede ser significativa en paquetes que incorporan muchas funciones (por ejemplo Plots).

Se puede evitar con el paquete [`JuliaInterpreter`](https://juliadebug.github.io/JuliaInterpreter.jl/stable/).

## Control del desbordamiento

Cuando se excede el mayor valor que puede representarse con un tipo, no se produce un error de desbordamiento, sino que se aplica aritm√©tica modular y se contin√∫a contando a partir del m√≠nimo. 

```{julia}
10^19
```

```{julia}
BigInt(10)^19
```

## Redefinici√≥n de variables como constantes y viceversa

Aunque Julia es un lenguaje de tipado din√°mico como Python, no permite redefinir una constante como una variable o viceversa. 

Hay que tener en cuenta que las funciones se definen como constantes por lo que no se puede utilizar el mismo nombre para una variable y una funci√≥n.

```julia
x = 1
const x = 2
```
```sh
ERROR: cannot declare x constant; it already has a value
Stacktrace:
 [1] top-level scope
   @ REPL[1]:1
```

```julia
f = 1
f(x) = 2x
```
```sh
ERROR: cannot define function f; it already has a value
Stacktrace:
 [1] top-level scope
   @ none:0
 [2] top-level scope
   @ REPL[3]:1
```

## Mezcla de sintaxis de otros lenguajes

- Las comillas simples se usan para representar caracteres y las dobles para cadenas.
- El operador de exponenciaci√≥n es `^` (y no `**` como en Python).
- Los operadores l√≥gicos `&` (conjunci√≥n), `|` (disyunci√≥n) y `!` (negaci√≥n), (y no `and`, `or` y `not` como en Python).
- Operador de concatenaci√≥n de cadenas `*` (y no `+` como en Python).
- El indexado de arrays comienza en 1 (y no en 0 como en Python).
- Los rangos para la indexaci√≥n tienen sintaxis `inicio:salto:fin` (y no `inicio:(fin+1):salto` como en Python).
- El operador de resto de la divisi√≥n entera es `%` (y no el m√≥dulo como en Python).
- La unidad imaginaria $\sqrt{-1}$ se representa `im` (y no `j` como en Python).

# Paquetes para Matem√°ticas

## C√°lculo simb√≥lico

- [SymPy](https://docs.juliahub.com/SymPy/KzewI/1.0.31/):  Sistema de √Ålgebra Computacional (CAS) basadado en la librer√≠a `SymPy` de Python.
- [Symbolics](https://juliasymbolics.org/): Sistema de √Ålgebra Computacional (CAS) basado en Julia.

## C√°lculo num√©rico

- [ForwardDiff](https://juliadiff.org/ForwardDiff.jl/stable/): C√°lculo de derivadas mediante diferenciaci√≥n autom√°tica.
- [QuadGK](https://juliamath.github.io/QuadGK.jl/stable/): C√°lculo de integrales en una variable mediante la cuadratura de Gauss-Kronrod.
- [Interpolations](https://juliamath.github.io/Interpolations.jl/latest/): Interpolaci√≥n mediante splines.
- [DifferentialEquations](https://docs.sciml.ai/DiffEqDocs/stable/): Resoluci√≥n de ecuaciones diferenciales.

## Algebra

- [LinearAlgebra](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/): √Ålgebra lineal.
- [Polynomials](https://juliamath.github.io/Polynomials.jl/stable/): Polinomios en una variable.
- [LinearSolve](https://docs.sciml.ai/LinearSolve/stable/tutorials/linear/): Resoluci√≥n de sistemas de ecuaciones lineales.
- [NonlinearSolve](https://docs.sciml.ai/NonlinearSolve/stable/): Resoluci√≥n de ecuaciones no lineales.
- [AbstractAlgebra](https://nemocas.github.io/AbstractAlgebra.jl/dev/): Estructuras algebraicas.


## Aprendizaje autom√°tico

- [SciML](https://sciml.ai/): Open Source Software for Scientific Machine Learning. Conjunto de paquetes para la simulaci√≥n y el aprendizaje autom√°tico.
  - [DifferentialEquations](https://docs.sciml.ai/DiffEqDocs/stable/): Resoluci√≥n de ecuaciones diferenciales.
  - [ModelingToolkit](https://docs.sciml.ai/ModelingToolkit/stable/): Modelado basado en ecuaciones. 
  - [Optimization](https://docs.sciml.ai/Optimization/stable/): Optimizaci√≥n
  - [NonlinearSolve](https://docs.sciml.ai/NonlinearSolve/stable/): Resoluci√≥n de ecuaciones no lineales.
- [MLJ.jl](https://github.com/alan-turing-institute/MLJ.jl). Funciones para los principales algoritmos de aprendizaje autom√°tico.
- [MLBase](https://mlbasejl.readthedocs.io/en/latest/): Preprocesamiento y evaluaci√≥n de modelos.
- [Flux](https://fluxml.ai/Flux.jl/stable/): Redes neuronales.

## Teor√≠a de grafos

- [JuliaGraphs](https://juliagraphs.org/). An√°lisis de grafos.
- [Graphs](https://juliapackages.com/p/graphs). Creaci√≥n y an√°lsisis de grafos.
- [GraphPlot](https://juliapackages.com/p/graphplot). Dibujo de grafos.

## Estad√≠stica

- [DataFrames](https://dataframes.juliadata.org/stable/). Manipulaci√≥n de conjuntos de datos en formato tabular.
- [Statistics](https://docs.julialang.org/en/v1/stdlib/Statistics/): Funciones estad√≠sticas b√°sicas (Estad√≠stica Descriptiva).
- [Distributions](https://juliastats.org/Distributions.jl/stable/): Modelos de distribuci√≥n de probabilidad.
- [HypothesisTests](https://juliastats.org/HypothesisTests.jl/stable/): Contrastes de hip√≥tesis.
- [MultivariateStats](https://juliastats.org/MultivariateStats.jl/dev/): Estad√≠stica multivariante (regresi√≥n, an√°lisis discriminante lineal, an√°lisis de componentes principales, an√°lsisis de correlaci√≥n can√≥nica, an√°lisis factorial, escalado multidimensional, etc.)
- [Clustering](https://juliastats.org/Clustering.jl/stable/). An√°lisis de conglomerados. Clasificaci√≥n no supervisada.
- [GLM](https://juliastats.org/GLM.jl/stable/): Modelos lineales generalizados.
- [TimeSeries](https://juliastats.org/TimeSeries.jl/dev/): Series temporales.

## Simulaci√≥n

- [ModelingToolkit](https://docs.sciml.ai/ModelingToolkit/stable/): Modelado basado en ecuaciones. 
- [FunctionalModels](https://tshort.github.io/FunctionalModels.jl/stable/): Modelado de sistemas f√≠sicos (similar a [Modelica](https://modelica.org/modelicalanguage.html)).
- [Simulate](https://github.com/non-Jedi/Simulate.jl): Simulaci√≥n de sucesos discretos.

# Referencias 

- [Julia Academy](https://juliaacademy.com/)
- [Calculus with Julia](https://jverzani.github.io/CalculusWithJuliaNotes.jl/)
- [Introduction to Applied Linear Algebra with Julia](https://web.stanford.edu/~boyd/vmls/)
- [SciML: Scientific Machine Learning](https://docs.sciml.ai/Overview/stable/)
- [Foundamentals of Numerical Computation](https://tobydriscoll.net/fnc-julia/nonlineqn/rootproblem.html)
- [Introduction to Numerical Analysis](https://github.com/mitmath/18330)
- [Introduction to Numerical Analysis II](https://github.com/ettersi/NumericalAnalysisII)
- [Computational Mathematics](https://github.com/ettersi/ComputationalMathematics)
- [Manual de Julia](https://aprendeconalf.es/manual-julia/)
- [Pr√°cticas de An√°lisis con Julia](https://aprendeconalf.es/analisis-practicas-julia/)

# ¬øPreguntas? {.unnumbered .unlisted}

<center>
![](img/preguntas.jpg)
</center>

# Gracias por la atenci√≥n {.unnumbered .unlisted}

<center>
![](img/qr.png)
</center>